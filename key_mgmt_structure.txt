The ContractDriver object does all of the key management in terms of organizing it into a simple interface so you don't have to mess around and remember how the keys are structured.

That being said, this is how it is working on a raw key/value store.

Assume:

def token():
   1 + 2
   
This will be submitted into the KV as:

token.__code__ = the code string
token.__type__ = the type is either 'system' or 'user' depending on if it's a genesis contract or not

If the contract has resources on it, they will be shown like this:

r = Key()
blah = Hash()

r = 10

def token():
    blah['stu'] = 100

token.__code__
token.__type__
token.r = set to 10
token.blah:stu = set to 100 when the main function is run
